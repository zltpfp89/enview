<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

	<bean id="EnviewDS" class="com.saltware.enview.components.jndi.DebuggingDataSourceJndiObjectFactoryBean">
       <property name="resourceRef"><value>false</value></property>
       <property name="jndiName">
           <value>java:comp/env/jdbc/enview</value>
       </property>
       <property name="debugCallStackPackages">
         <list>
           <value>org.apache.portals</value>
           <value>com.fmr</value>
         </list>
       </property>
    </bean>
       		
    <bean id="ojbConnectionManagement" class="com.saltware.enview.components.rdbms.ojb.ConnectionManagerManagementBean" />

    <bean id="ojbConfigurer" class="org.springframework.orm.ojb.support.LocalOjbConfigurer" depends-on="ojbConnectionManagement" />

    <!-- 
         Dynamically configures Database Platform for OJB by looking at the connection string
         and figuring out the OJB platform using an OJB metadata utility
         Its important to get this right otherwise you will be sending the wrong (most likely HSQL)
         flavor of SQL statements to the backend database.
     -->
     <bean id="PlatformConfigurator" 
           class="com.saltware.enview.components.rdbms.ojb.DatabasePlatformConfigurator"
           init-method="init"
      >
    	<constructor-arg index='0'>
    		<ref bean="EnviewDS"/>
    	</constructor-arg>         
        <!-- JNDI Name -->
    	<constructor-arg index='1'>
    		<value>EnviewDS</value>
    	</constructor-arg>                  
     </bean>

	<!-- 	
			Optional configuration for table schema aware datasource.
			
			The way to inject the schema switching is database specific. Here only the DB2 way
			is shown (set current schema = xx). Oracle statement might 
			be: "alter session set current_schema=xx", PostGres
			may look like this: "SET search_path TO xx"
			
			The idea was taken from http://forum.springframework.org/showthread.php?t=10728
			
			The runtime schema switching support was dropped because it is not needed here.
	-->
	<!--
		<bean id="EnviewDS"
			class="com.saltware.enview.components.datasource.SchemaAwareDataSourceProxy">
			<property name="targetDataSource">
				<ref local="dataSourceTarget" />
			</property>
			<property name="schemaSql">
				<value>set current schema = xx</value>
			</property>
		</bean>
		
		<bean id="dataSourceTarget"
			class="org.springframework.jndi.JndiObjectFactoryBean">
			<property name="resourceRef">
				<value>false</value>
			</property>
			<property name="jndiName">
				<value>java:comp/env/jdbc/enview</value>
			</property>
		</bean>
	-->
            
  <!--       
      Creates a JNDI-based datasource bean name "EnviewDS". The information
      provided here is merged with the basic configuration for the 
      jdbc-connection-descriptor with the matching jcd-alias property
      ("EnviewDS") located under /etc/db-ojb/repository_database.xml in the
      source tree.

      Another requirement for this to work is to have the 
      ConnectionFactoryClass=org.apache.ojb.broker.accesslayer.ConnectionFactoryManagedImpl
      or to have
      ConnectionManagerClass=com.saltware.enview.components.rdbms.ojb.ConnectionManagerImpl.
      (either will do, both are recommended, see comments in configuration file).
      These properties are located in /etc/db-ojb/OJB.properties in the source tree.
          
      FYI: The two OJB configuration files mentioned above are currently already setup this way 
      in the default Enview implementation.  
          
      However, if you need to locate/modify these files in a running instance of enview,
      they will be located under /WEB-INF/classes.
     -->
    <!--
  <bean id="EnviewDS" class="com.saltware.enview.components.rdbms.ojb.ConnectionRepositoryEntry">
    <property name="jndiName">
      <value>java:comp/env/jdbc/enview</value>
    </property>
  </bean>     
       -->
  
  <!-- If would like use a commons DBCP Pooled datasource as opposed to the default 
       JNDI one above you can uncomment the configuration below and fill in 
       the datasource information as it relates to your environment.

       A requirement for this to work is to have the 
       ConnectionFactoryClass=org.apache.ojb.broker.accesslayer.ConnectionFactoryDBCPImpl
       or to have
       ConnectionManagerClass=com.saltware.enview.components.rdbms.ojb.ConnectionManagerImpl
       This property is located in /etc/db-ojb/OJB.properties in the source tree.
    -->    
    
<!--        
    <bean id="EnviewDS" class="org.apache.commons.dbcp.BasicDataSource" 
        destroy-method="close"
        >
                <property name="driverClassName"><value>com.mysql.jdbc.Driver</value></property>
                <property name="url"><value>jdbc:mysql://localhost/j2test</value></property>
                <property name="username"><value>j2</value></property>
                <property name="password"><value>XXX</value></property>
        </bean>    
    -->
</beans>
